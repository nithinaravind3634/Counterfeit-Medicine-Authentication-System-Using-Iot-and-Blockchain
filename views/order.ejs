<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Payment Portal</title>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.2.7-rc.0/web3.min.js"></script>
    <style>
        body {
            background-image: url('media/order.jpg');
            background-size: cover;
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            color: #fff;
        }

        #paymentPortal {
            background-color: rgba(0, 0, 0, 0.7);
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
            text-align: center;
            margin-bottom: 20px;
        }

        button {
            background-color: #4caf50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-bottom: 10px;
        }

        button:hover {
            background-color: #45a049;
        }

        input {
            width: 40%;
            padding: 10px;
            margin-bottom: 15px;
            box-sizing: border-box;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        #readArea {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .statusBox {
            background-color: white;
            color: black;
            padding: 10px;
            border-radius: 4px;
            margin: 5px 0;
        }

        #outputArea {
            background-color: white;
            padding: 10px;
            border-radius: 4px;
            margin-top: 20px;
        }
    </style>

</head>
<body>
    <div id="paymentPortal">
        <h1>Confirmation Gateway</h1>
        <div id="readArea">
            <button onclick="connectMetamask()">CONNECT TO METAMASK</button>
            <div class="statusBox" id="userArea">Status: Not connected to Metamask</div>
            
            <button onclick="connectContract()">CONNECT TO CONTRACT</button>
            <div class="statusBox" id="contractArea">Status: Not connected to Contract</div>
        </div>
        
        <button onclick="withdraw()">Place the order</button> <br>
        <input type="text" id="addressInput" placeholder="Enter Address"> <br>
        <input type="number" id="amountInput" placeholder="Enter Quantity"> 
        <script>
            let account;
            const connectMetamask = async () => {
                if(window.ethereum !== "undefined") {
                    const accounts = await ethereum.request({method: "eth_requestAccounts"});
                    account = accounts[0];
                    document.getElementById("userArea").innerHTML = `User Account: ${account}`;
                }
            }
    
            const connectContract = async () => {
                const ABI = [
                    {
                        "inputs": [],
                        "name": "deposit",
                        "outputs": [],
                        "stateMutability": "payable",
                        "type": "function"
                    },
                    {
                        "inputs": [
                            {
                                "internalType": "address payable",
                                "name": "_to",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "_amount",
                                "type": "uint256"
                            }
                        ],
                        "name": "withdraw",
                        "outputs": [],
                        "stateMutability": "nonpayable",
                        "type": "function"
                    },
                    {
                        "inputs": [],
                        "name": "getAddress",
                        "outputs": [
                            {
                                "internalType": "address",
                                "name": "",
                                "type": "address"
                            }
                        ],
                        "stateMutability": "view",
                        "type": "function"
                    },
                    {
                        "inputs": [],
                        "name": "getBalance",
                        "outputs": [
                            {
                                "internalType": "uint256",
                                "name": "",
                                "type": "uint256"
                            }
                        ],
                        "stateMutability": "view",
                        "type": "function"
                    }
                ];
                const Address = "0x171a2D157FfABCF82a471c83Df4cD6e1803996be";
                window.web3 = await new Web3(window.ethereum);
                window.contract = await new window.web3.eth.Contract(ABI, Address);
                document.getElementById("contractArea").innerHTML = "Connected to Contract";
            }
    
            const getContractAccount = async () => {
                const data = await window.contract.methods.getAddress().call();
                document.getElementById("contractAccount").innerHTML = `Contract Account: ${data}`;
            }
    
            const getBalanceApple = async () => {
                const data = await window.contract.methods.getBalance().call();
                document.getElementById("balanceArea").innerHTML = `Contract Balance: ${data}`;
            }
    
            const depositContract = async () => {
                const amount = document.getElementById("depositInput").value;
                await window.contract.methods.deposit().send({from: account, value: amount});
            }
        const withdraw = async () => {
            const amount = document.getElementById("amountInput").value;
            const address = document.getElementById("addressInput").value;
            await window.contract.methods.withdraw(address, amount).send({from: account});
        }
        </script>
        </body>
        </html>